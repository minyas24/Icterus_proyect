## Generacion de dendograma
dendog <- read_csv(here("R_Bursera", "I_data", "1_B_altijuga_R.csv"))%>%
select(-fid, -gbifID, -species, -month, -year) %>%
scale( ) %>%
as_tibble() %>%
dist( method = "euclidean") %>%
hclust(method = "average") %>%
as.dendrogram( )
#install.packages("pacman")
library("pacman")
p_load("tidyverse",
"readr",
"here",
"spThin",
"readr",
"dplyr",
"dendextend")
dendog <- read_csv(here("R_Bursera", "I_data", "1_B_altijuga_R.csv"))%>%
select(-fid, -gbifID, -species, -month, -year) %>%
scale( ) %>%
as_tibble() %>%
dist( method = "euclidean") %>%
hclust(method = "average") %>%
as.dendrogram( )
dendog <- read_csv(here("R_Bursera", "B_data", "1_B_altijuga_R.csv"))%>%
select(-fid, -gbifID, -species, -month, -year) %>%
scale( ) %>%
as_tibble() %>%
dist( method = "euclidean") %>%
hclust(method = "average") %>%
as.dendrogram( )
dendog <- read_csv(here("R_Bursera", "B_data", "1_B_altijuga_R.csv"))%>%
select(-fid, -gbifID, -species, -month, -year) %>%
scale( ) %>%
as_tibble() %>%
dist( method = "euclidean") %>%
hclust(method = "average") %>%
as.dendrogram( )
library(here)
dendog <- read_csv(here("R_Bursera", "B_data", "8_B_biflora_R.csv"))%>%
select(-fid, -gbifID, -species, -month, -year) %>%
scale( ) %>%
as_tibble() %>%
dist( method = "euclidean") %>%
hclust(method = "average") %>%
as.dendrogram( )
View(dendog)
jpeg(file(here("R_Bursera", "B_data", "graphics", "B8_dendo.jpeg"), width = 5000, height = 2500)
jpeg(here("R_Bursera", "B_data", "graphics", "B8_dendo.jpeg"), width = 5000, height = 2500)
jpeg(file(here("R_Bursera", "B_data", "graphics", "B8_dendo.jpeg"), width = 5000, height = 2500))
jpeg(file = here("R_Bursera", "B_data", "graphics", "B8_dendo.jpeg"), width = 1000, height = 500)
jpeg(file = here("R_Bursera", "B_ouput", "B8_dendo.jpeg"), width = 1000, height = 500)
jpeg(file = here(R_Bursera/B_ouput/B8_dendo.jpeg), width = 1000, height = 500)
jpeg(file = here(R_Bursera/B_output/B8_dendo.jpeg), width = 1000, height = 500)
jpeg(file = here(R_Bursera/B_output/B8_dendo.jpeg), width = 1000, height = 500)
jpeg(file = here(Icterus_proyect/R_Bursera/B_output/B8_dendo.jpeg), width = 1000, height = 500)
jpeg(file = here(R_Bursera/B_output/B8_dendo.jpeg), width = 1000, height = 500)
jpeg(file = here("R_Bursera", "B_output", "B8_dendo.jpeg"), width = 1000, height = 500)
dendog <- read_csv(here("R_Bursera", "B_data", "8_B_biflora_R.csv"))%>%
select(-fid, -gbifID, -species, -month, -year) %>%
scale( ) %>%
as_tibble() %>%
dist( method = "euclidean") %>%
hclust(method = "average") %>%
as.dendrogram( )
df_dendo <- read_csv(here("R_Bursera", "B_data", "8_B_biflora_R.csv"))%>%
select(-fid, -gbifID, -species, -month, -year) %>%
scale( ) %>%
as_tibble() %>%
dist( method = "euclidean") %>%
hclust(method = "average") %>%
as.dendrogram( )
class(df_dendo)
tbb_dendo <- read_csv(here("R_Bursera", "B_data", "8_B_biflora_R.csv"))%>%
select(-fid, -gbifID, -species, -month, -year) %>%
scale( ) %>%
as_tibble() %>%
dist( method = "euclidean") %>%
hclust(method = "average") %>%
as.dendrogram( )
# **Icterus proyect**
library(rgbif) #descargar datos de ocurrencias
library(tidyverse) #procesamiento de datos
library(sf) #manipulaci?n  de datos vectoriales
library(rworldxtra) #datos vectoriales de los paises del mundo
library(geodata) #datos geoespaciales complemenatarios
library(ggspatial)#auxiliar para visualizar datos espaciales
library(terra) #datos raster
library(tidyterra) #maniipulaci?n de raster
library(paletteer) #colores
library(ggcorrplot) #diagrama de correlaciones
library(ggridges) #gr?fico de ridges
library(plotly) #gr?ficos avanzados
library(patchwork) #organizar gr?ficos
library(magick)
consulta_B <- name_backbone("Icterus cucullatus")
View(consulta_B)
consulta_A2 <- name_suggest("Icterus")$data
View(consulta_A2)
consulta_B <- name_backbone("Icterus spurius fuertesi")
View(consulta_B)
pacman("usethis")
library(pacman)
p_load("usethis")
usethis::edit_r_environ()
key_quercus <- name_backbone("Bursera")$usageKey
key_quercus <- name_backbone("Bursera")$usageKey
library(rgbif) #descargar datos de ocurrencias
key_quercus <- name_backbone("Bursera")$usageKey
consulta_1 <- name_backbone("Icterus cucullatus") # esta funcion obtiene el resultado que mejor coincida
View(consulta_1)
consulta_1 <- name_backbone("Icterus") # esta funcion obtiene el resultado que mejor coincida
View(consulta_1)
consulta_1 <- name_backbone("Icterus cucullatus") # esta funcion obtiene el resultado que mejor coincida
consulta_2 <- name_suggest("Icterus")$data
View(consulta_2)
key_cucullatus <- name_backbone("Icterus cucullatus")$usageKey
descarga_cucullatus <- occ_download(
descarga_cucullatus <- occ_download(
pred("taxonKey", key_cucullatus),
pred("hasCoordinate", TRUE),  # Filtrar solo por registros con coordenadas
pred("hasGeospatialIssue", FALSE), # Excluir registros con problemas geogrÃ¡ficos
user = gbif_user(),
pwd = gbif_pwd(),
email = gbif_email()
)
key_cucullatus <- name_backbone("Icterus cucullatus")$usageKey
key_cucullatus <- name_backbone("Icterus cucullatus")$usageKey
consulta_1 <- name_backbone("Icterus auratus") # esta funcion obtiene el resultado que mejor coincida
key_cucullatus <- name_backbone("Icterus auratus")$usageKey
key_auratus <- name_backbone("Icterus auratus")$usageKey
key_auratus <- name_backbone("Icterus auratus")$usageKey
descarga_auratus  <- occ_download(
pred("taxonKey", key_auratus),
pred("hasCoordinate", TRUE),
pred("hasGeospatialIssue", FALSE),
user = gbif_user(),
pwd = gbif_pwd(),
email = gbif_email()
)
library(usethis) #credenciales
descarga_auratus  <- occ_download(
pred("taxonKey", key_auratus),
pred("hasCoordinate", TRUE),
pred("hasGeospatialIssue", FALSE),
user = gbif_user(),
pwd = gbif_pwd(),
email = gbif_email()
)
usethis::edit_r_environ()
user <- Sys.getenv("gbif_user")
pwd <- Sys.getenv("gbif_pwd")
email <-Sys.getenv("gbif_email")
descarga_auratus  <- occ_download(
pred("taxonKey", key_auratus),
pred("hasCoordinate", TRUE),
pred("hasGeospatialIssue", FALSE),
pred("occurrenceStatus","PRESENT"),
user = gbif_user(),
pwd = gbif_pwd(),
email = gbif_email()
)
descarga_auratus  <- occ_download(
pred("taxonKey", key_auratus),
pred("hasCoordinate", TRUE),
pred("hasGeospatialIssue", FALSE),
pred("occurrenceStatus","PRESENT"),
user = user,
pwd = pwd,
email = email
)
print(descarga_auratus)
occ_download_wait('0048816-251009101135966')
keyid <- name_backbone("Icterus auratus")$usageKey
descarga_I_2 <- descarga_auratus
descarga_gbif <- descarga_I_2
df_gbif <- occ_download_get('0048816-251009101135966') %>%
df_gbif <- occ_download_get('0048816-251009101135966') %>%
occ_download_import()
df_gbif <- descarga_gbif%>%
occ_download_get() %>%
occ_download_import()
write_csv(df_gbif, "R-Icterus/I_data/I_abellei_2.csv")
library(tidyverse)
library(pacman)
p_load("vroom", "dplyr", "dendextend")
library(readr)
library(cluster)
library(here)
library(spThin)
library(readr)
library(colorspace)
write_csv(df_gbif, "R-Icterus/I_data/I_abellei_2.csv")
write_csv(df_gbif, "R_Icterus/I_data/I_abellei_2.csv")
install.packages("CoordinateCleaner")
library(CoordinateCleaner)
df_gbif <- read_csv(here("R_Icterus", "I_data", "I_abellei_2.csv"))
cleaned_data <- df_gbif %>%
clean_coordinates()%>%
write_csv("R_Icterus/I_data/I_abellei_2.csv")
View(cleaned_data)
View(df_gbif)
head(df_gbif)
names(df_gbif)
cc_equ(
lon = "decimalLongitude",
lat = "decimalLatitude",
test = "identical",
value = "clean",
verbose = TRUE
)
cleaned_data <- cleaned_data %>%
cc_equ(
lon = "decimalLongitude",
lat = "decimalLatitude",
test = "identical",
value = "clean",
verbose = TRUE
)
df_cleaning <- cleaned_data
df_cleaning <- df_gbif %>%
cc_equ(test = "identical")%>%
clean_coordinates(verbose = TRUE)
df_cleaning <- df_gbif %>%
cc_equ(test = "identical",
value = "clean")%>%
clean_coordinates(value = "clean",
verbose = TRUE)
df_cleaning %>% write_csv("R_Icterus/I_data/I_abellei_2.csv")
View(cleaned_data)
View(df_gbif)
df_cleaning <- df_gbif %>%
cc_equ(test = "identical", #default es "absolute"
value = "clean")%>%
clean_coordinates(tests = c("capitals", "centroids", "gbif", "institutions", "outliers", "seas",
"zeros"),
value = "clean",
verbose = TRUE)
names(df_cleaning)
unique(df_cleaning$country)
unique(df_cleaning$county)
unique(df_cleaning$countryCode)
unique(df_cleaning$basisOfRecord)
unique(df_cleaning$institutionCode)
df_cleaning %>%
ggplot(aes(x= institutionCode, fill= institutionCode))+
geom_bar()+
coord_flip()+
theme(legend.position = "none")
df_cleaning <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode == "iNaturalist")
df_cleaning %>%
ggplot(aes(x= institutionCode, fill= institutionCode))+
geom_bar()+
coord_flip()+
theme(legend.position = "none")
df_gbif <- read_csv(here("R_Icterus", "I_data", "I_abellei_2.csv"))
df_cleaning <- df_gbif %>%
cc_equ(test = "identical", #default es "absolute"
value = "clean")%>%
clean_coordinates(tests = c("capitals", "centroids", "gbif", "institutions", "outliers", "seas",
"zeros"),
value = "clean",
verbose = TRUE)
df_cleaning %>%
ggplot(aes(x= institutionCode, fill= institutionCode))+
geom_bar()+
coord_flip()+
theme(legend.position = "none")
df_cleaning2 <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode !"iNaturalist")
df_cleaning2 <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist")
df_cleaning2 %>%
ggplot(aes(x= institutionCode, fill= institutionCode))+
geom_bar()+
coord_flip()+
theme(legend.position = "none")
df_cleaning <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist")
unique(df_cleaning$isInvasive)
unique(df_cleaning$repatriated)
unique(df_cleaning$speciesKey)
unique(df_cleaning$species)
names(df_cleaning)
prueba <- df_cleaning %>%
distinct(gbifID, .keep_all = TRUE)
distinct(decimalLatitude, decimalLongitude .keep_all = TRUE)
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE)
unique(df_cleaning$acceptedScientificName)
unique(df_cleaning$verbatimScientificName)
df_cleaning <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
write_csv("R_Icterus/I_data/I_abellei_2.csv")
df_cleaning2 <- distinct(df_cleaning, decimalLatitude, decimalLongitude, .keep_all = TRUE)
df_cleaning <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>%
write_csv("R_Icterus/I_data/I_abellei_2.csv")
unique(df_cleaning$scientificName)
unique(df_cleaning$verbatimScientificName)
unique(df_cleaning$species)
df_cleaning <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>% #elimina puntos duplicados, keep conserva todas las columnas
select(gbifID, year, month, decimalLatitude, decimalLongitude, species) %<%
write_csv("R_Icterus/I_data/I_abellei_2.csv")
library(tidyverse)
df_cleaning <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>% #elimina puntos duplicados, keep conserva todas las columnas
select(gbifID, year, month, decimalLatitude, decimalLongitude, species) %<%
write_csv("R_Icterus/I_data/I_abellei_2.csv")
df_cleaning <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>%
select(gbifID, year, month, decimalLatitude, decimalLongitude, species) %<%
write_csv("R_Icterus/I_data/I_abellei_2.csv")
df_cleaning <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>%
select(gbifID, year, month, decimalLatitude, decimalLongitude, species) %<%
write_csv("R_Icterus/I_data/I_abellei_2.csv")
df_cleaning <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>% #elimina puntos duplicados, keep conserva todas las columnas
write_csv("R_Icterus/I_data/I_abellei_2.csv")
df_clean <- select(gbifID, year, month, decimalLatitude, decimalLongitude, species) %<%
write_csv("R_Icterus/I_data/I_abellei_2.csv")
df_cleaning <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>% #elimina puntos duplicados, keep conserva todas las columnas
select(gbifID, year, month, decimalLatitude, decimalLongitude, species) %>%
write_csv("R_Icterus/I_data/I_abellei_2.csv")
df_clean <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>% #elimina puntos duplicados, keep conserva todas las columnas
select(gbifID, year, month, decimalLatitude, decimalLongitude, species) %>% #selecciona solo las columnas a usar
write_csv("R_Icterus/I_data/I_abellei_2.csv") #guarda en un csv
df_clean <- df_cleaning
df_clean <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>% #elimina puntos duplicados, keep conserva todas las columnas
select(species, decimalLatitude, decimalLongitude, month, year, gbifID) %>% #selecciona solo las columnas a usar, en el orden dado
write_csv("R_Icterus/I_data/I_abellei_2.csv"
View(df_cleaning)
View(df_cleaning)
View(df_cleaning2)
df_clean2 <- df_cleaning2 %>% select(species, decimalLatitude, decimalLongitude, month, year, gbifID)
View(df_clean2)
df_clean <- df_cleaning %>%
filter(!is.na(institutionCode), institutionCode != "iNaturalist") %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>% #elimina puntos duplicados, keep conserva todas las columnas
select(species, decimalLatitude, decimalLongitude, month, year, gbifID) %>% #selecciona solo las columnas a usar, en el orden dado
write_csv("R_Icterus/I_data/I_abellei_2.csv")
df_clean <- df_cleaning %>%
distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>% #elimina puntos duplicados, keep conserva todas las columnas
select(species, decimalLatitude, decimalLongitude, month, year, gbifID) %>% #selecciona solo las columnas a usar, en el orden dado
write_csv("R_Icterus/I_data/I_abellei_2.csv") #guarda en un csv
shp_icter <- df_clean %>%
st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), crs= 4326)
library(tidyverse)
library(pacman)
p_load("vroom", "dplyr", "dendextend")
library(readr)
library(cluster)
library(here)
library(spThin)
library(readr)
library(colorspace)
library(usethis) #credenciales
library(rgbif)
shp_icter <- df_clean %>%
shp_icter <- df_clean %>%
st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), crs= 4326)
library(sf) #manipulaci?n  de datos vectoriales
library(rworldxtra) #datos vectoriales de los paises del mundo
library(geodata) #datos geoespaciales complemenatarios
library(ggspatial)#auxiliar para visualizar datos espaciales
library(terra) #datos raster
library(tidyterra) #maniipulaci?n de raster
library(paletteer) #colores
library(ggcorrplot) #diagrama de correlaciones
library(ggridges) #gr?fico de ridges
library(plotly) #gr?ficos avanzados
library(patchwork) #organizar gr?ficos
library(magick)
shp_icter <- df_clean %>%
st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), crs= 4326)
df_clean <- read_csv(here("R_Icterus", "I_data", "I_abellei_2.csv"))
shp_icter <- df_clean %>%
shp_icter <- df_clean %>%
st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), crs= 4326)
library(tidyverse)
library(pacman)
p_load("vroom", "dplyr", "dendextend")
library(readr)
library(cluster)
library(here)
library(spThin)
library(readr)
library(colorspace)
library(usethis) #credenciales
library(rgbif) #descargar datos de ocurrencias
shp_icter <- df_clean %>%
st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), crs= 4326)
alt <- worldclim_global(var="elev", res=0.5, path=tempdir())
data(countriesHigh)
Mundo <- st_as_sf(countriesHigh)
ggplot()+
geom_spatraster(data= alt)+
geom_sf(data= shp_icter, aes(col = species), col="red4")+
coord_sf(xlim = c(-120, -77), ylim = c(32, 10))+
scale_fill_paletteer_c("grDevices::terrain.colors",
limits = c(0, 5000),
na.value = "transparent")
env <- worldclim_global(var = "bio", res = 0.5, path = "datos_wc")
names(env)
v_names <- vector()
for(i in 1:19){
v_names[i] <- paste0("bio_", sprintf("%02d", i)) #sprintf(formato de 2 dÃ­gitos)
}
v_names
names(alt)
alt <- alt %>% rename(elev_20 = wc2.1_30s_elev)
names(alt)
env_icter <- extract(env, shp_icter)  #extract, capa ambiental y el lugar al que queremos enviar la informaciÃ³n
View(env_icter)
env_icter <- extract(alt, env_icter)
shp_icter <- df_clean %>%
st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), crs= 4326)
View(shp_icter)
save.image("C:/Users/Yas/Desktop/Icterus_proyect/1.RData")
